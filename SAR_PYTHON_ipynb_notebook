{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": [],
      "authorship_tag": "ABX9TyMt5/NRYsSONeA0Os4t9dyq",
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/Shruthi973/RIDE-CANCELLATIONS/blob/main/SAR_PYTHON_ipynb_notebook\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# SAR Ride Cancellation Prediction using Python\n",
        "\n",
        "# üì¶ 1. Load libraries\n",
        "import pandas as pd\n",
        "import numpy as np\n",
        "from sklearn.model_selection import train_test_split\n",
        "from sklearn.linear_model import LogisticRegression, LassoCV\n",
        "from sklearn.ensemble import RandomForestClassifier\n",
        "from sklearn.preprocessing import StandardScaler\n",
        "from sklearn.metrics import accuracy_score, classification_report, confusion_matrix\n",
        "import seaborn as sns\n",
        "import matplotlib.pyplot as plt\n",
        "\n",
        "# üì• 2. Load data\n",
        "df = pd.read_csv(\"SAR Rental.csv\")\n",
        "print(\"Initial shape:\", df.shape)\n",
        "\n",
        "# üßπ 3. Data Cleaning\n",
        "df = df.drop(columns=[\n",
        "    \"row#\", \"package_id\", \"from_city_id\", \"to_city_id\",\n",
        "    \"from_date\", \"to_date\", \"booking_created\"\n",
        "])\n",
        "df = df.dropna()\n",
        "print(\"After cleaning:\", df.shape)\n",
        "\n",
        "# üéØ 4. Define X and y\n",
        "X = df.drop(columns=[\"Car_Cancellation\"])\n",
        "y = df[\"Car_Cancellation\"]\n",
        "\n",
        "# üìä 5. Feature Scaling\n",
        "scaler = StandardScaler()\n",
        "X_scaled = scaler.fit_transform(X)\n",
        "\n",
        "# üß™ 6. Train-Test Split\n",
        "X_train, X_test, y_train, y_test = train_test_split(\n",
        "    X_scaled, y, test_size=0.2, random_state=42)\n",
        "\n",
        "# ‚úÖ 7. Logistic Regression\n",
        "lr = LogisticRegression(max_iter=1000)\n",
        "lr.fit(X_train, y_train)\n",
        "y_pred_lr = lr.predict(X_test)\n",
        "\n",
        "print(\"\\nüîç Logistic Regression Results:\")\n",
        "print(\"Accuracy:\", accuracy_score(y_test, y_pred_lr))\n",
        "print(confusion_matrix(y_test, y_pred_lr))\n",
        "print(classification_report(y_test, y_pred_lr))\n",
        "\n",
        "# üå≤ 8. Random Forest\n",
        "rf = RandomForestClassifier(n_estimators=100, random_state=42)\n",
        "rf.fit(X_train, y_train)\n",
        "y_pred_rf = rf.predict(X_test)\n",
        "\n",
        "print(\"\\nüå≤ Random Forest Accuracy:\", accuracy_score(y_test, y_pred_rf))\n",
        "\n",
        "# üîé 9. LASSO Regression\n",
        "lasso = LassoCV(cv=5, random_state=42)\n",
        "lasso.fit(X_train, y_train)\n",
        "y_pred_lasso = np.round(lasso.predict(X_test))\n",
        "\n",
        "print(\"\\nüîç LASSO Regression Accuracy:\", accuracy_score(y_test, y_pred_lasso))\n",
        "\n",
        "# üìà 10. Visualize class balance\n",
        "sns.countplot(x=\"Car_Cancellation\", data=df)\n",
        "plt.title(\"Class Distribution ‚Äì Car Cancellations\")\n",
        "plt.show()\n",
        "\n",
        "# üßæ 11. Conclusion\n",
        "print(\"\"\"\n",
        "üìå Conclusion:\n",
        "- Logistic Regression and LASSO showed ~92% accuracy.\n",
        "- LASSO helped identify significant predictors.\n",
        "- Dataset is highly imbalanced ‚Äî consider SMOTE or class weighting in future work.\n",
        "- Model interpretability and simplicity make Logistic Regression ideal for deployment.\n",
        "\"\"\")\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 974
        },
        "id": "M5yKOVJuWCls",
        "outputId": "30e7ac6e-dc24-4be2-91ea-e3aecf684c78"
      },
      "execution_count": 3,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Initial shape: (10000, 19)\n",
            "After cleaning: (7909, 12)\n",
            "\n",
            "üîç Logistic Regression Results:\n",
            "Accuracy: 0.922882427307206\n",
            "[[1457    2]\n",
            " [ 120    3]]\n",
            "              precision    recall  f1-score   support\n",
            "\n",
            "           0       0.92      1.00      0.96      1459\n",
            "           1       0.60      0.02      0.05       123\n",
            "\n",
            "    accuracy                           0.92      1582\n",
            "   macro avg       0.76      0.51      0.50      1582\n",
            "weighted avg       0.90      0.92      0.89      1582\n",
            "\n",
            "\n",
            "üå≤ Random Forest Accuracy: 0.9127686472819216\n",
            "\n",
            "üîç LASSO Regression Accuracy: 0.9222503160556258\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 640x480 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "\n",
            "üìå Conclusion:\n",
            "- Logistic Regression and LASSO showed ~92% accuracy.\n",
            "- LASSO helped identify significant predictors.\n",
            "- Dataset is highly imbalanced ‚Äî consider SMOTE or class weighting in future work.\n",
            "- Model interpretability and simplicity make Logistic Regression ideal for deployment.\n",
            "\n"
          ]
        }
      ]
    }
  ]
}